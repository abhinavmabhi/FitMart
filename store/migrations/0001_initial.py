# Generated by Django 5.1.4 on 2025-01-12 07:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Equipment_category',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Flavour',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Suppliment_Category',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='tags',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('name', models.CharField(max_length=200)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='BMICalculation',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('height', models.FloatField(help_text='Height in centimeters')),
                ('weight', models.FloatField(help_text='Weight in kilograms')),
                ('bmi', models.FloatField()),
                ('result', models.CharField(max_length=50)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='basket', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Equipments',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.PositiveIntegerField(help_text='Price in INR')),
                ('price_without_offer', models.PositiveIntegerField(blank=True, null=True)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('weight', models.DecimalField(blank=True, decimal_places=0, help_text='weight in (kg)', max_digits=5, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='Equipment_picture')),
                ('brand_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.brand')),
                ('equipment_category_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_category', to='store.equipment_category')),
                ('Tag_obj', models.ManyToManyField(to='store.tags')),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=20)),
                ('payment', models.CharField(choices=[('COD', 'COD'), ('ONLINE', 'ONLINE')], default='ONLINE', max_length=100)),
                ('rzr_order_id', models.CharField(max_length=100, null=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Suppliment',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('price', models.PositiveIntegerField(help_text='price in INR')),
                ('price_without_offer', models.PositiveIntegerField(blank=True, null=True)),
                ('stock', models.PositiveIntegerField(default=0)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='Suppliment_picture')),
                ('weight', models.DecimalField(decimal_places=2, help_text='weight in (kg)', max_digits=5)),
                ('brand_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='store.brand')),
                ('flavour_obj', models.ManyToManyField(to='store.flavour')),
                ('Suppliment_Category_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suppliment_category', to='store.suppliment_category')),
                ('tag_obj', models.ManyToManyField(to='store.tags')),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Order_item',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('price', models.PositiveIntegerField()),
                ('equipment_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.equipments')),
                ('order_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='store.orders')),
                ('suppliment_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='store.suppliment')),
            ],
            bases=('store.basemodel',),
        ),
        migrations.CreateModel(
            name='Cart_item',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='store.basemodel')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('is_order_placed', models.BooleanField(default=False)),
                ('cart_obj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_item', to='store.cart')),
                ('equipment_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_equipment', to='store.equipments')),
                ('suppliment_obj', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_suppliment', to='store.suppliment')),
            ],
            bases=('store.basemodel',),
        ),
    ]
